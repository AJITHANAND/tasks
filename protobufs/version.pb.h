// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: version.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_version_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_version_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_version_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_version_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_version_2eproto;
class Operaion;
struct OperaionDefaultTypeInternal;
extern OperaionDefaultTypeInternal _Operaion_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
class Versions;
struct VersionsDefaultTypeInternal;
extern VersionsDefaultTypeInternal _Versions_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Operaion* Arena::CreateMaybeMessage<::Operaion>(Arena*);
template<> ::Version* Arena::CreateMaybeMessage<::Version>(Arena*);
template<> ::Versions* Arena::CreateMaybeMessage<::Versions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Operaion_operaion_type : int {
  Operaion_operaion_type_insert = 0,
  Operaion_operaion_type_edit = 1,
  Operaion_operaion_type_delete_ = 2,
  Operaion_operaion_type_Operaion_operaion_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Operaion_operaion_type_Operaion_operaion_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Operaion_operaion_type_IsValid(int value);
constexpr Operaion_operaion_type Operaion_operaion_type_operaion_type_MIN = Operaion_operaion_type_insert;
constexpr Operaion_operaion_type Operaion_operaion_type_operaion_type_MAX = Operaion_operaion_type_delete_;
constexpr int Operaion_operaion_type_operaion_type_ARRAYSIZE = Operaion_operaion_type_operaion_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operaion_operaion_type_descriptor();
template<typename T>
inline const std::string& Operaion_operaion_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operaion_operaion_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operaion_operaion_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operaion_operaion_type_descriptor(), enum_t_value);
}
inline bool Operaion_operaion_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operaion_operaion_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operaion_operaion_type>(
    Operaion_operaion_type_descriptor(), name, value);
}
// ===================================================================

class Operaion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Operaion) */ {
 public:
  inline Operaion() : Operaion(nullptr) {}
  ~Operaion() override;
  explicit PROTOBUF_CONSTEXPR Operaion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operaion(const Operaion& from);
  Operaion(Operaion&& from) noexcept
    : Operaion() {
    *this = ::std::move(from);
  }

  inline Operaion& operator=(const Operaion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operaion& operator=(Operaion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operaion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operaion* internal_default_instance() {
    return reinterpret_cast<const Operaion*>(
               &_Operaion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Operaion& a, Operaion& b) {
    a.Swap(&b);
  }
  inline void Swap(Operaion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operaion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operaion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operaion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operaion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Operaion& from) {
    Operaion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operaion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Operaion";
  }
  protected:
  explicit Operaion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Operaion_operaion_type operaion_type;
  static constexpr operaion_type insert =
    Operaion_operaion_type_insert;
  static constexpr operaion_type edit =
    Operaion_operaion_type_edit;
  static constexpr operaion_type delete_ =
    Operaion_operaion_type_delete_;
  static inline bool operaion_type_IsValid(int value) {
    return Operaion_operaion_type_IsValid(value);
  }
  static constexpr operaion_type operaion_type_MIN =
    Operaion_operaion_type_operaion_type_MIN;
  static constexpr operaion_type operaion_type_MAX =
    Operaion_operaion_type_operaion_type_MAX;
  static constexpr int operaion_type_ARRAYSIZE =
    Operaion_operaion_type_operaion_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  operaion_type_descriptor() {
    return Operaion_operaion_type_descriptor();
  }
  template<typename T>
  static inline const std::string& operaion_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, operaion_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function operaion_type_Name.");
    return Operaion_operaion_type_Name(enum_t_value);
  }
  static inline bool operaion_type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      operaion_type* value) {
    return Operaion_operaion_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .Operaion.operaion_type type = 1;
  void clear_type();
  ::Operaion_operaion_type type() const;
  void set_type(::Operaion_operaion_type value);
  private:
  ::Operaion_operaion_type _internal_type() const;
  void _internal_set_type(::Operaion_operaion_type value);
  public:

  // @@protoc_insertion_point(class_scope:Operaion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_version_2eproto;
};
// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionIdFieldNumber = 1,
    kTimeFieldNumber = 4,
    kVersionNumFieldNumber = 5,
    kOperationFieldNumber = 2,
    kProjectIdFieldNumber = 3,
  };
  // string versionId = 1;
  void clear_versionid();
  const std::string& versionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_versionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_versionid();
  PROTOBUF_NODISCARD std::string* release_versionid();
  void set_allocated_versionid(std::string* versionid);
  private:
  const std::string& _internal_versionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_versionid(const std::string& value);
  std::string* _internal_mutable_versionid();
  public:

  // string time = 4;
  void clear_time();
  const std::string& time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string versionNum = 5;
  void clear_versionnum();
  const std::string& versionnum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_versionnum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_versionnum();
  PROTOBUF_NODISCARD std::string* release_versionnum();
  void set_allocated_versionnum(std::string* versionnum);
  private:
  const std::string& _internal_versionnum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_versionnum(const std::string& value);
  std::string* _internal_mutable_versionnum();
  public:

  // .Operaion operation = 2;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const ::Operaion& operation() const;
  PROTOBUF_NODISCARD ::Operaion* release_operation();
  ::Operaion* mutable_operation();
  void set_allocated_operation(::Operaion* operation);
  private:
  const ::Operaion& _internal_operation() const;
  ::Operaion* _internal_mutable_operation();
  public:
  void unsafe_arena_set_allocated_operation(
      ::Operaion* operation);
  ::Operaion* unsafe_arena_release_operation();

  // int32 projectId = 3;
  void clear_projectid();
  int32_t projectid() const;
  void set_projectid(int32_t value);
  private:
  int32_t _internal_projectid() const;
  void _internal_set_projectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versionid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versionnum_;
    ::Operaion* operation_;
    int32_t projectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_version_2eproto;
};
// -------------------------------------------------------------------

class Versions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Versions) */ {
 public:
  inline Versions() : Versions(nullptr) {}
  ~Versions() override;
  explicit PROTOBUF_CONSTEXPR Versions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Versions(const Versions& from);
  Versions(Versions&& from) noexcept
    : Versions() {
    *this = ::std::move(from);
  }

  inline Versions& operator=(const Versions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Versions& operator=(Versions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Versions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Versions* internal_default_instance() {
    return reinterpret_cast<const Versions*>(
               &_Versions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Versions& a, Versions& b) {
    a.Swap(&b);
  }
  inline void Swap(Versions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Versions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Versions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Versions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Versions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Versions& from) {
    Versions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Versions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Versions";
  }
  protected:
  explicit Versions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 1,
  };
  // repeated .Version versions = 1;
  int versions_size() const;
  private:
  int _internal_versions_size() const;
  public:
  void clear_versions();
  ::Version* mutable_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version >*
      mutable_versions();
  private:
  const ::Version& _internal_versions(int index) const;
  ::Version* _internal_add_versions();
  public:
  const ::Version& versions(int index) const;
  ::Version* add_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version >&
      versions() const;

  // @@protoc_insertion_point(class_scope:Versions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version > versions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_version_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Operaion

// .Operaion.operaion_type type = 1;
inline void Operaion::clear_type() {
  _impl_.type_ = 0;
}
inline ::Operaion_operaion_type Operaion::_internal_type() const {
  return static_cast< ::Operaion_operaion_type >(_impl_.type_);
}
inline ::Operaion_operaion_type Operaion::type() const {
  // @@protoc_insertion_point(field_get:Operaion.type)
  return _internal_type();
}
inline void Operaion::_internal_set_type(::Operaion_operaion_type value) {
  
  _impl_.type_ = value;
}
inline void Operaion::set_type(::Operaion_operaion_type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Operaion.type)
}

// string content = 2;
inline void Operaion::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Operaion::content() const {
  // @@protoc_insertion_point(field_get:Operaion.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operaion::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Operaion.content)
}
inline std::string* Operaion::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Operaion.content)
  return _s;
}
inline const std::string& Operaion::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Operaion::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Operaion::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Operaion::release_content() {
  // @@protoc_insertion_point(field_release:Operaion.content)
  return _impl_.content_.Release();
}
inline void Operaion::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Operaion.content)
}

// -------------------------------------------------------------------

// Version

// string versionId = 1;
inline void Version::clear_versionid() {
  _impl_.versionid_.ClearToEmpty();
}
inline const std::string& Version::versionid() const {
  // @@protoc_insertion_point(field_get:Version.versionId)
  return _internal_versionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_versionid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.versionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Version.versionId)
}
inline std::string* Version::mutable_versionid() {
  std::string* _s = _internal_mutable_versionid();
  // @@protoc_insertion_point(field_mutable:Version.versionId)
  return _s;
}
inline const std::string& Version::_internal_versionid() const {
  return _impl_.versionid_.Get();
}
inline void Version::_internal_set_versionid(const std::string& value) {
  
  _impl_.versionid_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_versionid() {
  
  return _impl_.versionid_.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_versionid() {
  // @@protoc_insertion_point(field_release:Version.versionId)
  return _impl_.versionid_.Release();
}
inline void Version::set_allocated_versionid(std::string* versionid) {
  if (versionid != nullptr) {
    
  } else {
    
  }
  _impl_.versionid_.SetAllocated(versionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.versionid_.IsDefault()) {
    _impl_.versionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Version.versionId)
}

// .Operaion operation = 2;
inline bool Version::_internal_has_operation() const {
  return this != internal_default_instance() && _impl_.operation_ != nullptr;
}
inline bool Version::has_operation() const {
  return _internal_has_operation();
}
inline void Version::clear_operation() {
  if (GetArenaForAllocation() == nullptr && _impl_.operation_ != nullptr) {
    delete _impl_.operation_;
  }
  _impl_.operation_ = nullptr;
}
inline const ::Operaion& Version::_internal_operation() const {
  const ::Operaion* p = _impl_.operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Operaion&>(
      ::_Operaion_default_instance_);
}
inline const ::Operaion& Version::operation() const {
  // @@protoc_insertion_point(field_get:Version.operation)
  return _internal_operation();
}
inline void Version::unsafe_arena_set_allocated_operation(
    ::Operaion* operation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operation_);
  }
  _impl_.operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Version.operation)
}
inline ::Operaion* Version::release_operation() {
  
  ::Operaion* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Operaion* Version::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_release:Version.operation)
  
  ::Operaion* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
  return temp;
}
inline ::Operaion* Version::_internal_mutable_operation() {
  
  if (_impl_.operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Operaion>(GetArenaForAllocation());
    _impl_.operation_ = p;
  }
  return _impl_.operation_;
}
inline ::Operaion* Version::mutable_operation() {
  ::Operaion* _msg = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:Version.operation)
  return _msg;
}
inline void Version::set_allocated_operation(::Operaion* operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.operation_;
  }
  if (operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(operation);
    if (message_arena != submessage_arena) {
      operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:Version.operation)
}

// int32 projectId = 3;
inline void Version::clear_projectid() {
  _impl_.projectid_ = 0;
}
inline int32_t Version::_internal_projectid() const {
  return _impl_.projectid_;
}
inline int32_t Version::projectid() const {
  // @@protoc_insertion_point(field_get:Version.projectId)
  return _internal_projectid();
}
inline void Version::_internal_set_projectid(int32_t value) {
  
  _impl_.projectid_ = value;
}
inline void Version::set_projectid(int32_t value) {
  _internal_set_projectid(value);
  // @@protoc_insertion_point(field_set:Version.projectId)
}

// string time = 4;
inline void Version::clear_time() {
  _impl_.time_.ClearToEmpty();
}
inline const std::string& Version::time() const {
  // @@protoc_insertion_point(field_get:Version.time)
  return _internal_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Version.time)
}
inline std::string* Version::mutable_time() {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:Version.time)
  return _s;
}
inline const std::string& Version::_internal_time() const {
  return _impl_.time_.Get();
}
inline void Version::_internal_set_time(const std::string& value) {
  
  _impl_.time_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_time() {
  
  return _impl_.time_.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_time() {
  // @@protoc_insertion_point(field_release:Version.time)
  return _impl_.time_.Release();
}
inline void Version::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  _impl_.time_.SetAllocated(time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_.IsDefault()) {
    _impl_.time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Version.time)
}

// string versionNum = 5;
inline void Version::clear_versionnum() {
  _impl_.versionnum_.ClearToEmpty();
}
inline const std::string& Version::versionnum() const {
  // @@protoc_insertion_point(field_get:Version.versionNum)
  return _internal_versionnum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_versionnum(ArgT0&& arg0, ArgT... args) {
 
 _impl_.versionnum_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Version.versionNum)
}
inline std::string* Version::mutable_versionnum() {
  std::string* _s = _internal_mutable_versionnum();
  // @@protoc_insertion_point(field_mutable:Version.versionNum)
  return _s;
}
inline const std::string& Version::_internal_versionnum() const {
  return _impl_.versionnum_.Get();
}
inline void Version::_internal_set_versionnum(const std::string& value) {
  
  _impl_.versionnum_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_versionnum() {
  
  return _impl_.versionnum_.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_versionnum() {
  // @@protoc_insertion_point(field_release:Version.versionNum)
  return _impl_.versionnum_.Release();
}
inline void Version::set_allocated_versionnum(std::string* versionnum) {
  if (versionnum != nullptr) {
    
  } else {
    
  }
  _impl_.versionnum_.SetAllocated(versionnum, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.versionnum_.IsDefault()) {
    _impl_.versionnum_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Version.versionNum)
}

// -------------------------------------------------------------------

// Versions

// repeated .Version versions = 1;
inline int Versions::_internal_versions_size() const {
  return _impl_.versions_.size();
}
inline int Versions::versions_size() const {
  return _internal_versions_size();
}
inline void Versions::clear_versions() {
  _impl_.versions_.Clear();
}
inline ::Version* Versions::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:Versions.versions)
  return _impl_.versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version >*
Versions::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:Versions.versions)
  return &_impl_.versions_;
}
inline const ::Version& Versions::_internal_versions(int index) const {
  return _impl_.versions_.Get(index);
}
inline const ::Version& Versions::versions(int index) const {
  // @@protoc_insertion_point(field_get:Versions.versions)
  return _internal_versions(index);
}
inline ::Version* Versions::_internal_add_versions() {
  return _impl_.versions_.Add();
}
inline ::Version* Versions::add_versions() {
  ::Version* _add = _internal_add_versions();
  // @@protoc_insertion_point(field_add:Versions.versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version >&
Versions::versions() const {
  // @@protoc_insertion_point(field_list:Versions.versions)
  return _impl_.versions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Operaion_operaion_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Operaion_operaion_type>() {
  return ::Operaion_operaion_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_version_2eproto
